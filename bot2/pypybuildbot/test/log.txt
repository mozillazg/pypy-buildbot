. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_python3_missing_bchr
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_lookup_default_encoding
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_int_base_16
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_str_mod
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_remove_duplicate_method_calls_bytes
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_remove_duplicate_method_calls_unicode
x pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_move_method_call_out_of_loop
 self = <pypy.module.pypyjit.test_pypy_c.test_string.TestString object at 0x7f4dbd175650>
 
     @pytest.mark.xfail
     def test_move_method_call_out_of_loop(self):
         # XXX this does not work: _lower_unicode() is found to be elidable,
         # but it can raise (because of 'raise StopIteration' in
         # Utf8StringIterator.next()---we don't detect that such an exception
         # is always caught in the caller).  Raising elidable calls are not
         # unroll-removed: see issue #2015.
         def main(n):
             lst = []
             s = 'Hello %d' % n
             for i in range(n):
                 t = s.lower()   # ID: callone
                 lst.append(t)
             return len(','.join(lst))
         log = self.run(main, [1000])
         assert log.result == main(1000)
         loops = log.loops_by_filename(self.filepath)
         loop, = loops
 >       assert loop.match_by_id('callone', '')    # nothing
 
 pypy/module/pypyjit/test_pypy_c/test_string.py:246: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 pypy/module/pypyjit/test_pypy_c/model.py:182: in match_by_id
     return matcher.match(expected_src, ignore_ops=ignore_ops)
 pypy/module/pypyjit/test_pypy_c/model.py:524: in match
     self.match_loop(expected_ops, ignore_ops)
 pypy/module/pypyjit/test_pypy_c/model.py:500: in match_loop
     self.match_op(op, exp_op)
 pypy/module/pypyjit/test_pypy_c/model.py:406: in match_op
     self._assert(op == '--end--', 'got more ops than expected')
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <pypy.module.pypyjit.test_pypy_c.model.OpMatcher object at 0x7f4dbd066d90>, cond = False, message = 'got more ops than expected'
 
     def _assert(self, cond, message):
         if not cond:
 >           raise InvalidMatch(message, frame=sys._getframe(1))
 E           InvalidMatch: got more ops than expected
 
 pypy/module/pypyjit/test_pypy_c/model.py:402: InvalidMatch
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_lookup_codec
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_decode_ascii
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_unicode_indexing_makes_no_bridges
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_unicode_indexing_small_constant_indices
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_unicode_slicing_small_constant_indices
F pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_decode_encode
 self = <pypy.module.pypyjit.test_pypy_c.test_string.TestString object at 0x7f4dbd1d47d0>
 
     def test_decode_encode(self):
         log = self.run(r"""
             def main(n):
                 global s
                 u = b'ab\xc3\xa4\xf0\x9f\x91\xa9\xe2\x80\x8d\xf0\x9f\x91\xa9\xe2\x80\x8d\xf0\x9f\x91\xa7\xe2\x80\x8d\xf0\x9f\x91\xa6'.decode("utf-8")
                 count = 0
                 for i in range(n):
                     b = (u + str(i)).encode("utf-8")
                     u = b.decode("utf-8") # ID: decode
                     count += 1
                 return count
             """, [10000])
         loop, = log.loops_by_filename(self.filepath)
         # No call to _check_utf8 is necessary, because the bytes come from
         # W_UnicodeObject.utf8_w.
         assert loop.match_by_id('decode', '''
 >           ''')
 
 pypy/module/pypyjit/test_pypy_c/test_string.py:382: 
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 pypy/module/pypyjit/test_pypy_c/model.py:182: in match_by_id
     return matcher.match(expected_src, ignore_ops=ignore_ops)
 pypy/module/pypyjit/test_pypy_c/model.py:524: in match
     self.match_loop(expected_ops, ignore_ops)
 pypy/module/pypyjit/test_pypy_c/model.py:500: in match_loop
     self.match_op(op, exp_op)
 pypy/module/pypyjit/test_pypy_c/model.py:406: in match_op
     self._assert(op == '--end--', 'got more ops than expected')
 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 
 self = <pypy.module.pypyjit.test_pypy_c.model.OpMatcher object at 0x7f4dbd078350>, cond = False, message = 'got more ops than expected'
 
     def _assert(self, cond, message):
         if not cond:
 >           raise InvalidMatch(message, frame=sys._getframe(1))
 E           InvalidMatch: got more ops than expected
 
 pypy/module/pypyjit/test_pypy_c/model.py:402: InvalidMatch
 ---------- Captured stdout call ----------
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Loops don't match
 =================
 loop id = 'decode'
 ('got more ops than expected',)
 <could not determine information>
 
 Ignore ops: []
 Got:
 
 	===== HERE =====
     i91 = call_i(ConstClass(_check_utf8), p82, 0, 0, -1, descr=<Calli 8 riii EF=4>)
     guard_no_exception(descr=<Guard0x7fb1f54bdfa0>)
     i93 = int_ge(i91, 0)
     guard_true(i93, descr=<Guard0x7fb1f54bf850>)
 
 Expected:
 
. pypy/module/pypyjit/test_pypy_c/test_string.py::TestString::()::test_find
